/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.developer.avro.in;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Metadado extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4998578163948338028L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Metadado\",\"namespace\":\"io.confluent.developer.avro.in\",\"fields\":[{\"name\":\"tipo\",\"type\":\"string\",\"avro.java.string\":\"String\"},{\"name\":\"versao\",\"type\":\"string\",\"avro.java.string\":\"String\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Metadado> ENCODER =
      new BinaryMessageEncoder<Metadado>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Metadado> DECODER =
      new BinaryMessageDecoder<Metadado>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Metadado> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Metadado> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Metadado>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Metadado to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Metadado from a ByteBuffer. */
  public static Metadado fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence tipo;
  @Deprecated public java.lang.CharSequence versao;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Metadado() {}

  /**
   * All-args constructor.
   * @param tipo The new value for tipo
   * @param versao The new value for versao
   */
  public Metadado(java.lang.CharSequence tipo, java.lang.CharSequence versao) {
    this.tipo = tipo;
    this.versao = versao;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tipo;
    case 1: return versao;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tipo = (java.lang.CharSequence)value$; break;
    case 1: versao = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'tipo' field.
   * @return The value of the 'tipo' field.
   */
  public java.lang.CharSequence getTipo() {
    return tipo;
  }

  /**
   * Sets the value of the 'tipo' field.
   * @param value the value to set.
   */
  public void setTipo(java.lang.CharSequence value) {
    this.tipo = value;
  }

  /**
   * Gets the value of the 'versao' field.
   * @return The value of the 'versao' field.
   */
  public java.lang.CharSequence getVersao() {
    return versao;
  }

  /**
   * Sets the value of the 'versao' field.
   * @param value the value to set.
   */
  public void setVersao(java.lang.CharSequence value) {
    this.versao = value;
  }

  /**
   * Creates a new Metadado RecordBuilder.
   * @return A new Metadado RecordBuilder
   */
  public static io.confluent.developer.avro.in.Metadado.Builder newBuilder() {
    return new io.confluent.developer.avro.in.Metadado.Builder();
  }

  /**
   * Creates a new Metadado RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Metadado RecordBuilder
   */
  public static io.confluent.developer.avro.in.Metadado.Builder newBuilder(io.confluent.developer.avro.in.Metadado.Builder other) {
    return new io.confluent.developer.avro.in.Metadado.Builder(other);
  }

  /**
   * Creates a new Metadado RecordBuilder by copying an existing Metadado instance.
   * @param other The existing instance to copy.
   * @return A new Metadado RecordBuilder
   */
  public static io.confluent.developer.avro.in.Metadado.Builder newBuilder(io.confluent.developer.avro.in.Metadado other) {
    return new io.confluent.developer.avro.in.Metadado.Builder(other);
  }

  /**
   * RecordBuilder for Metadado instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Metadado>
    implements org.apache.avro.data.RecordBuilder<Metadado> {

    private java.lang.CharSequence tipo;
    private java.lang.CharSequence versao;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.developer.avro.in.Metadado.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tipo)) {
        this.tipo = data().deepCopy(fields()[0].schema(), other.tipo);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.versao)) {
        this.versao = data().deepCopy(fields()[1].schema(), other.versao);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Metadado instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.developer.avro.in.Metadado other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.tipo)) {
        this.tipo = data().deepCopy(fields()[0].schema(), other.tipo);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.versao)) {
        this.versao = data().deepCopy(fields()[1].schema(), other.versao);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'tipo' field.
      * @return The value.
      */
    public java.lang.CharSequence getTipo() {
      return tipo;
    }

    /**
      * Sets the value of the 'tipo' field.
      * @param value The value of 'tipo'.
      * @return This builder.
      */
    public io.confluent.developer.avro.in.Metadado.Builder setTipo(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.tipo = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tipo' field has been set.
      * @return True if the 'tipo' field has been set, false otherwise.
      */
    public boolean hasTipo() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tipo' field.
      * @return This builder.
      */
    public io.confluent.developer.avro.in.Metadado.Builder clearTipo() {
      tipo = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'versao' field.
      * @return The value.
      */
    public java.lang.CharSequence getVersao() {
      return versao;
    }

    /**
      * Sets the value of the 'versao' field.
      * @param value The value of 'versao'.
      * @return This builder.
      */
    public io.confluent.developer.avro.in.Metadado.Builder setVersao(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.versao = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'versao' field has been set.
      * @return True if the 'versao' field has been set, false otherwise.
      */
    public boolean hasVersao() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'versao' field.
      * @return This builder.
      */
    public io.confluent.developer.avro.in.Metadado.Builder clearVersao() {
      versao = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Metadado build() {
      try {
        Metadado record = new Metadado();
        record.tipo = fieldSetFlags()[0] ? this.tipo : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.versao = fieldSetFlags()[1] ? this.versao : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Metadado>
    WRITER$ = (org.apache.avro.io.DatumWriter<Metadado>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Metadado>
    READER$ = (org.apache.avro.io.DatumReader<Metadado>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
